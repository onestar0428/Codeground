#include <stdio.h>
#include <math.h>

unsigned long long branch(unsigned long long val, int n, int t) {
	int r1 = 10000, r2 = 10000;
	if (n == t) {
		return val;
	}
	if (val < 1 || val>10000) {
		return 10000;
	}
	else {
		if ((val - 1) % 3 == 0 && ((val - 1) / 3) % 2 == 1) {
			r1 = branch((val - 1) / 3, n, t + 1);
		}

		r2 = branch(val * 2, n, t + 1);
		if (r1 == 10000)
			return r2;

		return r1 < r2 ? r1 : r2;
	}
}

int main(void) {
	/* 아래 freopen 함수는 input.txt를 read only 형식으로 열고, 표준입력(키보드) 대신 input.txt 로 부터 읽어오겠다는 의미의 코드입니다.
	만약 본인 PC 에서 테스트 할 때는, 입력값을 input.txt에 저장한 후 freopen 함수를 사용하면
	그 아래에서 scanf 함수를 사용하여 표준입력 대신 input.txt 파일로 부터 입력값을 읽어 올 수 있습니다.
	또한, 본인 PC에서 freopen 함수를 사용하지 않고 표준입력을 사용하여 테스트하셔도 무방합니다.
	단, Codeground 시스템에서 "제출하기" 할 때에는 반드시 freopen 함수를 지우거나 주석(//) 처리 하셔야만 합니다. */
	freopen("input_sample.txt", "r", stdin);

	/* setbuf 함수를 사용하지 않으면, 본인의 프로그램이 제한 '시간 초과'로 강제 종료 되었을 때,
	printf로 출력한 내용이 채점되지 않고 '0점'이 될 수도 있습니다.
	시간 초과 전까지 실행된 결과 점수를 받고자 하신다면 "setbuf(stdout, NULL);" 를 사용하시기 바랍니다. */
	setbuf(stdout, NULL);

	int T;
	int test_case;

	scanf("%d", &T);

	for (test_case = 1; test_case <= T; test_case++) {
		// 이 부분에서 알고리즘 프로그램을 작성하십시오. 기본 제공된 코드를 수정 또는 삭제하고 본인이 코드를 사용하셔도 됩니다.
		int n;
		unsigned long long min = 10000, max = 0;

		scanf("%d", &n);

		if (n < 4)
			min = max = pow(2, n);
		else {
			max = min = pow(2, n);
			for (int i = 4; i <= (n / 2) * 2; i += 2) {
				if (min > branch((unsigned long long)pow(2, i), n, i))
					min = branch((unsigned long long)pow(2, i), n, i);
			}
		}
		// 이 부분에서 정답을 출력하십시오.
		printf("Case #%d\n", test_case);
		printf("%llu %llu\n", min, max);
	}

	return 0;	// 정상종료 시 반드시 0을 리턴해야 합니다.
}

/*
Case #1
Case #1
406 1099511627776
Case #2
135 2199023255552
Case #3
270 4398046511104
Case #4
540 8796093022208
Case #5
185 17592186044416
Case #6
361 35184372088832
Case #7
123 70368744177664
Case #8
246 140737488355328
Case #9
481 281474976710656
Case #10
169 562949953421312
Case #11
329 1125899906842624
Case #12
641 2251799813685248
Case #13
219 4503599627370496
Case #14
427 9007199254740992
Case #15
159 18014398509481984
Case #16
295 36028797018963968
Case #17
569 72057594037927936
Case #18
1138 144115188075855872
Case #19
379 288230376151711744
Case #20
758 576460752303423488
Case #21
283 1152921504606846976
Case #22
505 2305843009213693952
Case #23
1010 4611686018427387904*/